The following is a product requirement.  Please generate code to match this requirement.

Problem statement:

I have a single page application website and want to pre-render all the pages so I can allow the website to be crawled by spiders that cannot render JavaScript.

Requirements:

1. Environment Setup:
  - The tool must be compatible with Node.js version 14.x or later and headless Google Chrome (current version).
  - Use the latest available stable version of puppeteer for rendering.
  - Use the latest available stable version of yargs for command line options.
  - Use the latest available stable version of axios to handle the HTTP requests.
  - Use the latest available stable version of fast-xml-parser to handle the XML parsing.
2. Tool Invocation:
  - The tool should be invoked as a script with Node.js using ES6 modules.
  - Ensure that the tool can be run from the command line with appropriate parameters.
  - The tool does not need a configuration file.
3. Sitemap Handling:
  - The tool will scan a sitemap.xml file that will provide a list of URLs to be pre-rendered.
  - The sitemap will be defined by either a file or a URL.  Either option can be provided but not both, and one option must be provided by the user.
  - If the sitemap is being defined by a file then the --sitemap-file paramater will define where to find the sitemap file.
  - If the sitemap is being defined by a URL then the --sitemap-url parameter will define the URL where to find the sitemap file.
  - If the response from the web server to fetching the sitemap via a URL is redirect status code then log the new URL and load from that URL instead.
  - Include an option to replace the protocol and hostname in the URLs using the --replace-url parameter.  The --replace-url parameter should take the form "<new-url-prefix>=<old-url-prefix>".
  - Only one --relace-url parameter can be provided and it only supports a single old and new host pair.
  - The tool must check that the form of any --replace-url parameter correctly matches the form expected, noting that the hostname prefix may include a port number.
  - The logic should handle either a sitemap or a sitemap index.
  - When the tool encounters a sitemap index it should emit a console message: "Processing sitemap index".  It should then process each sitemap within the sitemap index.
  - For each sitemap found in a sitemap index, emit a console message: "Processing sitemap: <name>" where <name> is the name of the sitemap file, and then process the sitemap file.
4. File Management:
  - Rendered pages should be saved in a specified output directory.
  - The output directory is defined by the non-optional --output command line parameter.
  - For each page, the directory structure should match the URL path, but should not include the hostname or any port number.
  - If the page does not have an explicit ".html" or ".htm" name then assume it is a directory and create a file "index.html" as the file name within that output directory.  Example: URL https://davehudson.io/blog/post should be saved as <output-directory>/blog/post/index.html where <output-directory> is the path specified as the output directory.
  - If the output directory or any subdirectories do not exist then they should be created.  If creating the directories fails then emit a failure message to the console and exit with an error status.
  - Before attempting any to invoke puppeteer for a given URL, any previous output file that matches what will be the new output file must be deleted.
  - The tool must not delete any file or directory that will not be written as an output file.
  - If any file or directory operations fail then log a message to the console and exit with an error status.
5. Rendering:
  - Once the directory structure is in place and all old index.html files have been deleted, render all the pages.
  - The tool should parallelize rendering operations.
  - The default number of parallel tasks should default to the number of available CPU cores.
  - Include an optional parameter --parallel-renders to specify a different number of parallel tasks.
  - As soon as a render completes then the next available render should be started.
  - For performance reasons, only start puppeteer once.
  - The tool should handle network errors, timeouts, and rendering errors.
  - If an error occurs, even if it's handled, log a message indicating the URL that had the error along with a message indicating why the error occurred.
  - In the event of any errors, ensure that all puppeteer resources are released correctly.
6. Retry Mechanism:
  - Implement a retry mechanism for failed render attempts with a default of 3 retries.
  - The retry mechanism should be applied to invocations of puppeteer as well as for network failures.
  - Allow this to be configurable with the --max-retries parameter.
  - If a failure occurs, wait one second before attempting the retry.
  - The tool should exit with an error status if any page fails to render after retries.
7. Successful completion:
  - If all pages render successfully, exit with a success status.
8. Logging:
  - Emit console messages for progress and errors.
  - The tool does not need to log to a file.
  - Example messages:
  - “Rendered: <url>”, where <url> is the URL has been rendered.
  - “Failed: <url>: <reason>”, where <url> is the URL being processed, and <reason> is the failure reason.
  - There should be no other console messages.
9.  Usage Information:
  - If invoked with invalid parameters, display correct usage information.
  - Include a -h parameter to display a help message with all valid parameters and their usage.
10. Code Quality:
  - Use JSDoc annotations for all functions.
  - Use 4 spaces for indentation in the source code.
  - Where any functions may throw errors, include try/catch blocks to handle those error conditions.
  - For code style, do not use an "else" if the previous block in an if statement ends with a "return" statement.
11. Dependencies:
  - Any package dependencies that you might need must be explicitly stated in these requirements.  If you need to use a dependency that is not listed here then ask for approval or use a different approach.

