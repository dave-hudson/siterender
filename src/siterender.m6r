Goal:
    I have a single page application website and want to pre-render all the pages so I can allow the website to be
    crawled by spiders that cannot render JavaScript.

    Story:
        Motivation.

        As: a website developer,
        I: want to pre-render all the pages of my website
        So: I can allow the website to be crawled by spiders that cannot render JavaScript.

    Story:
        Core functionality.

        Require:
            I require an tool that can scan a sitemap.xml file, determine all of the web pages available in the website
            described by that file and pre-render them all to an output directory.

    Story:
        Sitemap handling.

        Require:
            The sitemap will be defined by either a file or a URL.  Either option can be provided but not both, and one
            option must be provided by the user.

        Require:
            The logic should handle either a sitemap or a sitemap index.  If it encounters a sitemap index then it must
            process all the individual sitemaps within the sitemap index.

        Require:
            If the response from the web server to fetching the sitemap via a URL is redirect status code then log the
            new URL and load from that URL instead.

        Require:
            As a sitemap and files may be being served from a development server the tool must support replacing the protocol
            and hostname in the sitemap URLs with an alternative.  This will be implemented via the --replace-url argument.

    Story:
        Rendering.

        Require: Rendered pages must be saved in a specified output directory.

        Require:
            For each page, the directory structure should match the URL path, but should not include the hostname or
            any port number.

        Require:
            If the page does not have an explicit ".html" or ".htm" name then assume it is a directory and create a file "index.html" as the file name within that output directory.

            Example:
                Given: the tool is scanning URLs for the website "https://davehudson.io",
                When: the tool has found a URL "https://davehudson.io/blog/post",
                Then:
                    The output file should be saved as "<output-directory>/blog/post/index.html" where <output-directory>
                    is the path specified as the output directory.

        Require:
            If the output directory or any subdirectories do not exist then they should be created.  If creating the
            directories fails then emit a failure message to the console and exit with an error status.

        Require:
            Before attempting any to invoke puppeteer for a given URL, any previous output file that matches what will be
            the new output file must be deleted.

        Require: The tool must not delete any file or directory that will not be written as an output file.

        Require: If any file or directory operations fail then log a message to the console and exit with an error status.

        Require:
            Once the directory structure is in place and all old index.html files have been deleted, render all the pages.
            Do not attempt to start rendering until the old files are deleted and the new output directories have been created.

        Require: The tool should parallelize rendering operations.

        Require: The default number of parallel tasks should default to the number of available CPU cores.

        Require: As soon as a render completes then the next available render should be started.

        Require: For performance reasons, only start puppeteer once.

        Require: The tool should handle network errors, timeouts, and rendering errors.

        Require: In the event of any errors, ensure that all puppeteer resources are released correctly.

    Story:
        Retry Mechanism.

        Require: In the event of a failure to render a URL, use a retry mechanism with a default of 3 retries.

        Require: The retry mechanism should be applied to invocations of puppeteer as well as for network failures.

        Require:
            If a failure occurs, wait 1 second before attempting the retry, then apply exponential backoff up to a maximum
            of 8 seconds.

        Require: The tool should exit with an error status if any page fails to render after retries.

    Story:
        Exit status.

        Require: If all pages render successfully, exit with a success status.

        Require: If any of the pages fail to render successfully, and all retries have failed, then exit with a failure status.

    Story:
        Logging.

        Require: Emit console messages for progress and errors.

        Require: The tool does not need to log to a file.

        Require:
            When the tool encounters a sitemap index it should emit a console message: "Processing sitemap index: <name>", where
            <name> is the name of the sitemap index file.

        Require:
            For each sitemap, including all those found in a sitemap index,, emit a console message:
            "Processing sitemap: <name>", where <name> is the name of the sitemap file.

        Require:
            Output messages:

            Require: “Rendered: <url>”, where <url> is the URL has been rendered.
            Require: “Failed: <url>: <reason>”, where <url> is the URL being processed, and <reason> is the failure reason.

        Require:
            If an error occurs, even if it's handled, log a message indicating the URL that had the error along with a
            message indicating why the error occurred.

        Require: There should be no other console messages.

    Story:
        Tool invocation.

        As: a website developer,
        I: would like to start my pre-render tool from the command line,
        So: I can easily configure the behaviour I want.

        Require: The tool will be run from the command line with appropriate arguments.

        Require: The tool should be invoked as a script with Node.js using ES6 modules.

        Require: The tool does not need a configuration file.

        Require:
            If the sitemap is being defined by a file then the "--sitemap-file" argument will define where to find
            the sitemap file.

        Require:
            If the sitemap is being defined by a URL then the "--sitemap-url" argument will define the URL where to
            find the sitemap file.

        Require: The output directory is defined by the non-optional "--output" argument.

        Require: The number of parallel tasks can be configured using the optional "--parallel-renders" argument.

        Require: The number of retries can be configured using the optional "--max-retries" argument.

        Require:
            If the user wishes to replace the start of a URL read in a sitemap file will a new prefix, this will be
            done using the "--replace-url" argument.  The "--replace-url" parameter should take the form
            "<new-url-prefix>=<old-url-prefix>".  Note that the URL prefix may include a port number as well as a
            domain name and protocol.

        Require:
            If the user specifies a "-h" or "--help" argument then display a help message with all valid arguments,
            any parameters they may have, and their usage.

        Require:
            The tool must check that the form of all parameters correctly matches what is expected for each
            command line argument.

        Require: If the tool is invoked with invalid parameters, display correct usage information.

    Story:
        Implementation and dependencies.

        As: a website developer,
        I: want the implementation to be easy to maintain,
        So: I want to use a well-defined set of coding standards and dependencies.

        Require: The tool should be build using TypeScript.

        Require: The tool must be compatible with Node.js version 14.x or later and headless Google Chrome (current version).

        Require: Use the latest available stable version of puppeteer for rendering.

        Require: Use the latest available stable version of yargs for command line options.

        Require: Use the latest available stable version of axios to handle the HTTP requests.

        Require: Use the latest available stable version of fast-xml-parser to handle the XML parsing.

        Require:
            Any package dependencies that you might need must be explicitly stated in these requirements.  If you need to
            use a dependency that is not listed here then ask for approval or use a different approach.

        Require: Use JSDoc annotations for all functions.

        Require: Use 4 spaces for indentation in the source code.

        Require: Where any functions may throw errors, include try/catch blocks to handle those error conditions.

        Require: For code style, do not use an "else" if the previous block in an if statement ends with a "return" statement.

        Require:
            The core logic of the tool should go in a file, "logic.ts", while the command line processing capabilities
            should go in a file "siterender.ts".

    Story:
        Quality.

        As: a software maintainer for the tool,
        I: would like there to be comprehensive test coverage for the tool,
        So: any modifications can be checked to ensure they work correctly.

        Require:
            The logic of the tool in "logic.ts" must be able to be tested using the Jest framework.

        Require:
            The tests should cover as many lines of code and as many branches as possible.

    Story:
        Previous version.

        Require:
            An implementation of the tool is provided here.  It may not accurately reflect the
            requirements stated previously, in which case it will need to be modified to support them.

            Code: src/siterender.ts
            Code: src/logic.ts

        Require:
            An implementation of the tests for src/logic.ts is provided here:

            Code: src/logic.test.ts
